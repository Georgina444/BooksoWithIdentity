{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*",
  "ConnectionStrings": {
    "DefaultConnection": "Server=DESKTOP-6LABEOF;Database=BooksoDb;Trusted_Connection=True;TrustServerCertificate=True;" // Establishes conncetion with SQL Server
  },
  "Stripe": {
    "SecretKey": "sk_test_51MYzgdKywG2Cq71E5ufJZKkv2SZUOaSGuwwYpMC4txA7J84INt3lCfNDZSq24FnkuzsSOnnyGwSN2PC1YFC7LmUT00LBtBvj3E",
    "PublishableKey": "pk_test_51MYzgdKywG2Cq71EsgeMM06Su5qkjuPUntCYlFn7vXNl0cwHvfGqV0tgB8EzzlYgzs2AhCWeAlIiIAhitMSL9gCw00dd3017Wr"
  }
}

// connection strings 

// We need to tell our application that we will be using SQL Server
// In order to establish a connection we will be using EF Core 
// and we will have to create an object of the DbContext,
// using that DbContext we will be able to make the conneciton to the database


// STEPS:
// 1. Create a new Data folder
// 2. Create a DbContext
// 3. You have to create a DbSet inside the ApplicationDbContext for every model(table) you create
// 4. Tell the application in needs to use the DbContext which is in ApplicationDbContext and that it has to use the SQL server in the connection we defined
// (in program.cs)
// 5. Create the table with migrations to push the changes to the database

// How migrations work? 
// -Based on this migrations EF creates an optimized version of a SQl query and it will automatically run that on the db


// 1.1. Create a Controller for Category
// 1.2 Create an object of the applicationDbContext and use that to call our database and table 
// WELL, with Dependency Injection we don't have to create an object of this class(it is done because we have configured that inside our container,
// we just have to ask the application to send the object of the ApplicationDbContext)
// 1.2.1 Inside the controller(e.g. CategoryController) we need to tell it 
